#+title: Funciones
#+author: Miguel Piña
#+date: [2017-01-09 lun 20:49]
#+setupfile: ~/proyectos/org-html-themes/setup/theme-bigblow.setup

* Introducción

En esta sesión veremos:

- Cómo calcular una suma usando ciclos.
- Argumentos por defecto de una función

* Calculando sumas
Para calcular la suma en un programa, usamos un ciclo y una variable de acumulación.

La sintaxis del *for*:

#+BEGIN_SRC python
for VARIABLE in LIST:
  BODY
#+END_SRC

Esto es equivalente a:

#+BEGIN_SRC python
i=0

while i < len(LIST):
  VARIABLE = LIST[i] BODY
  i=i+1
#+END_SRC

** Ejemplos
#+BEGIN_SRC python
for number in range(20):
  if number % 2 == 0:
  print number

for fruit in ["banana", "apple", "quince"]:
  print "I like to eat " + fruit + "s!"
#+END_SRC

Una suma [[file:images/funcion1.png]] se implementa:

#+BEGIN_SRC python
s = 0
for i in range(1, n+1):
  s += i**2
print s
#+END_SRC

Es natural hacer el calculo de una suma dentro de una
función:

#+BEGIN_SRC python
def suma(x, n):
  s = 0
  for i in range(1, n+1):
    s += x
  return s
#+END_SRC

* Argumentos por defecto

Algunos argumentos de la función se les puede dar un
valor por defecto para que podamos omitrlos en la
llamada.

#+BEGIN_SRC python
def somefunc(arg1, arg2, kwarg1=True, kwarg2=0):
  print arg1, arg2, kwarg1, kwarg2
#+END_SRC

Los argumentos por defecto deben ser listados después
de los argumentos posicionales.

#+BEGIN_SRC python
somefunc(’Hello’, [1,2])
# Hello [1, 2] True 0

somefunc(’Hello’, [1,2], kwarg1=’Hi’)
# Hello [1, 2] Hi 0

somefunc(’Hello’, [1,2], kwarg2=’Hi’)
# Hello [1, 2] True Hi

somefunc(’Hello’, [1,2], kwarg2=’Hi’, kwarg1=6)
# Hello [1, 2] 6 Hi

somefunc(kwarg2=’Hello’, arg1=’Hi’, kwarg1=6, arg2=[1,2])
# Hi [1, 2] 6 Hello
#+END_SRC

** Ejemplo

La variable independiente t, es un argumento posicional
ordinario,

y los parámetros A, a, y w son argumentos por defecto
con valores adecuados.

[[file:images/funcion2.png]]


#+BEGIN_SRC python
from math import pi, exp, sin

def f(t, A=1, a=1, omega=2*pi):
   return A*exp(-a*t)*sin(omega*t)

f(0.2)
f(0.2, omega=1)
#+END_SRC


* Documentación

Por convención, en Python para se escribe una cadena de
documentación después de la definición de la función.

La cadena de documentación, debe contener una breve
descripción del propósito de la función y explicar los
argumentos y valores de retorno.

Las cadenas de documentación se insertan entre *'''*.

#+BEGIN_SRC python
def C2F(C):
   """Convert Celsius degrees (C) to Fahrenheit."""
   return (9.0/5)*C + 32
#+END_SRC


* Funciones como argumentos

Frecuentemente el cálculo de una función requiere de
otra función como argumento.

#+BEGIN_SRC python
def greet(name):
   return "Hello " + name

def call_func(func):
    other_name = "John"
    return func(other_name)

print(call_func(greet))

# Hello John
#+END_SRC

* Funciones dentro de otras funciones

#+BEGIN_SRC python
def greet(name):
    def get_message():
        return "Hello "

    result = get_message() + name
    return result

print(greet("John"))

# Hello John
#+END_SRC

* Funciones que regresan funciones

#+BEGIN_SRC python
def compose_greet_func():
    def get_message():
        return "Hello there!"
    return get_message()

greet = compose_greet_func()
print(compose_greet_func())

# Hello there!
#+END_SRC

* Programa principal
Para hacer un programa reutilizable es recomendable
poner todo el código en funciones y métodos y designar
una función como la principal __main__, y hacer la
llamada a la función principal cuando __name__ llame a
__main__.

El propósito de hacerlo es que el código de la función
principal no es llamado cuando el programa se importa
como un módulo.

#+BEGIN_SRC python
def suma(x, y):
  return x + y

def main():
  print(suma(3,4))

if __name__ == '__main__':
  main()
#+END_SRC


* Funciones lambda
Podemos crear funciones anonimas.

Las funciones lambda no tienen enunciado return,
siempre regresan una expresion.

#+BEGIN_SRC python
f = lambda x, y: x**2 + y

# Equivalent to:

def f(x, y):
  return(x**2 + y)
#+END_SRC

Las funciones lambda se utilizan normalmente para
definir de manera rapida una función como argumento de
otra función.

#+BEGIN_SRC python
def make_incrementor(n):
   return lambda x: x + n * 2

f = make_incrementor(2)
g = make_incrementor(6)

print(f(42), g(42))
# 46 54

# Equivalent to:
print(make_incrementor(22)(33))
# 77
#+END_SRC

* Pruebas de Verificación

Podemos hacer pruebas de verificación.

Hacemos una nueva función que calcula en primer lugar
una respuesta correcta a un problema de conteo

y luego llama a las otras funciones para comprobar que
cada llamada tiene el resultado correcto.

Algunas convenciones para la función de prueba son:
- Tener un nombre que empieza con test.
- No tienen argumentos.
- Mostrar una variable booleana que diga si pasó la prueba o no.

#+begin_src python
def suma_geometrica(n):
    valor = 0
    for i in range(1, n + 1):
        valor += 1 / 2 ** i
    return valor

def test_suma_geometrica():
    for i in range(1, 1001):
        if suma_geometrica(i) > 1:
            print("El valor fallo en: " + str(i))
            return False
    return True

print("Función correcta " + str(test_suma_geometrica()))
#+end_src
