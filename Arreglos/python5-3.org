#-*- mode: org -*-

* Copiando Arreglos
Dada X una matriz, la expresión  a = x crea  una referencia a la misma matriz x. 

Un cambio en a también afecta x:

#+BEGIN_SRC python
import numpy as np
x = np.array([1, 2, 3.5])
print(x)
a = x
a[-1] = 3  # Esto cambia x[-1] !
print(x)
# array([ 1.,  2.,  3.])
#+END_SRC

Necesitamos hacer una copia de x:

#+BEGIN_SRC python
a = x.copy()
a[-1] = 9
print(a)
# array([ 1.,  2.,  9.])
print(x)
# array([ 1.,  2.,  3.])
#+END_SRC


* Aritmetica In-Place
Sean a y b dos arreglos de las mismas dimensiones. 

La expresión a += b significa a = a + b. 

En la expresión a = a + b, el resultado da otro arreglo que sustituye al arreglo a.

En cambio, en la expresión a += b la suma se hace directamente, no hay arreglos intermedios.

Esto significa la operación a += b es más eficiente que a = a + b pues no genera arreglos intermedios.

Las operaciones +=, *=, etc. se llaman *In-Place*.

** Ejemplo

a = (3* x**s4 + 2*x + 4)/(x + 1)

El cómputo crea 7 arreglos escondidos para guardar los calculos intermedios:

- r1 = x**4
- r2 = 3*r1
- r3 = 2*x
- r4 = r2 + r3 
- r5 = r4 + 4 
- r6 = x + 1 
- r7 = r5/r6 
- a = r7

Usando operaciones In-Place solo se crean 3 arreglos intermedios:
- a = x.copy()  (Crea un arreglo)
- a **= 4
- a *= 3
- a += 2*x  (Crea un arreglo) 
- a += 4
- a /= x + 1 (Crea un arreglo)


* Generalizando Indices
Cualquier lista de enteros puede ser usada como índices:

#+BEGIN_SRC python
a = np.linspace(1, 8, 8)
print(a)
# array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.])

a[[1, 6, 7]] = 10
print(a)
# array([  1.,  10.,   3.,   4.,   5.,   6.,  10.,  10.])

a[range(2,8,3)] = -2   # a[2:8:3] = -2
print(a)
# array([  1.,  10.,  -2.,   4.,   5.,  -2.,  10.,  10.])
#+END_SRC

También podemos usar arreglos booleanos como conjunto de indices.

Los índices corresponden a los valores True del arreglo.

Esto permite expresiones como a[x,m].

#+BEGIN_SRC python
a[a < 0]            # pick out the negative elements of a
# array([-2., -2.])

a[a < 0] = a.max()
print(a)
# array([  1.,  10.,  10.,   4.,   5.,  10.,  10.,  10.])

# Replace elements where a is 10 by the first
# elements from another array/list:
a[a == 10] = [10, 20, 30, 40, 50]
print(a)
# array([  1.,  10.,  20.,   4.,   5.,  30.,  40.,  50.])
#+END_SRC


* Vectorizando una función constante
#+BEGIN_SRC python
def f(x):
   return 2
#+END_SRC

Esta función acepta arreglos como parámetros, pero devuelve un flotante,

mientras que la versión vectorizada debería devolver un arreglo con la misma dimensión que x

con valores 2.

#+BEGIN_SRC python
def fv(x):
    return np.zeros(x.shape, x.dtype) + 2  # dtype for data type
#+END_SRC 

La función óptima debería aceptar parametros escalares o arreglos:

#+BEGIN_SRC python
def f(x):
    if isinstance(x, (float, int)):
       return 2
    elif isinstance(x, np.ndarray):  #ndarray (Numerical Python array)
       return np.zeros(x.shape, x.dtype) + 2
    else:
       raise TypeError("x must be int, float or ndarray, not %s" % type(x))
#+END_SRC


* Cambiando la forma de un arreglo
El atributo shape en un arreglo, devuelve el tamaño de cada dimensión. 

La función size devuelve el número total de elementos del arreglo.

#+BEGIN_SRC python
a = np.linspace(-1, 1, 6)
print (a)
# [-1.  -0.6 -0.2  0.2  0.6  1. ]
print(a.shape)
# (6,)

print(a.size)
# 6

a.shape = (2, 3)
a = a.reshape(2, 3) 
print(a.shape)
#(2, 3)

print (a)
# [[-1. -0.6 -0.2]
# [0.2 0.6 1.]] 

print(a.size) # total number of elements
# 6

print(len(a)) # number of rows
# 2

a.shape = (a.size,) # Reset shape
#+END_SRC


* Arreglos de dimensiones altas
  
** Matrices
Una *matriz* es una tabla con entradas ordenadas en columnas y renglones.

A_{m,n} = 
 \begin{pmatrix}
  a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\
  a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\
  \vdots  & \vdots  & \ddots & \vdots  \\
  a_{m,1} & a_{m,2} & \cdots & a_{m,n} 
 \end{pmatrix}


Operaciones con matrices:
- Suma
- Resta
- Multiplicación
- División
- Rango

Podemos generalizar el concepto de arreglo en matrices.

#+BEGIN_SRC python
table =[[-30, -22.0], [-20, -4.0], [-10, 14.0]]
table2 = np.array(table) # Transform into matrix

print(table2)
# [[-30. -22.]
# [-20., -4.]
#  [-10.  14.]]

type(table2)
<type ’numpy.ndarray’
#+END_SRC

Decimos que tabla2 es una matriz bidimensional, o una matriz de rango 2. 

Los arreglos estan almacenados de manera muy diferente en memoria. 

La variable de *tabla* hace referencia a un objeto Lista que contiene tres elementos. 

Cada uno de estos elementos es una referencia a un objeto de lista separada
con dos elementos, donde cada elemento se refiere a un objeto flotante separado. 


La variable *tabla2* es una referencia a un único objeto de matriz que se refiere
a una secuencia consecutiva de bytes en la memoria donde se almacenan los seis números de punto flotante. 

Los datos asociados con tabla2 se encuentran en un trozo continuo de la memoria de la computadora,
mientras que los datos asociados a la tabla se dispersan en la memoria. 


Es mucho más caro buscar datos en memoria que hacer calculos con los datos. 

Las matrices hacen la búsqueda de datos más eficiente.

La indexación de una lista anidada se realiza en dos etapas: 
- Primero, la lista exterior está indexada, lo que da acceso a un elemento que es otra lista.
- Luego esta última lista está indexada.

#+BEGIN_SRC python
table[1][0] # tabla[1] es [-20,4], cuyo índice 0, es -20
-20

Esta sintaxis funciona para matrices bidimensionales también:
table2[1][0]
-20.0

Hay otra sintaxis que es más común en las matrices:
Tabla2 [1,0]
-20.0
#+END_SRC

Una matriz bidimensional tiene un cierto número de renglones y columnas. 

Nos referimos a filas como la primera dimensión de la matriz y las columnas como la segunda dimensión. 

Estas dos dimensiones están disponibles como table2.shape:
table2.shape
(3, 2)


Donde, 3 es el número de renglones y 2 es el número de columnas.

Un loop sobre todos los elementos en una matriz de dos dimensiones es por lo general

expresada como dos loops for anidados, uno para cada índice:

#+BEGIN_SRC python
for i in range(table2.shape[0]):
    for j in range(table2.shape[1]):
        print("table2[%d,%d] = %g" % (i, j, table2[i,j]))

table2[0,0] = -30
table2[0,1] = -22
table2[1,0] = -20
table2[1,1] = -4
table2[2,0] = -10
table2[2,1] = 14
#+END_SRC

Una forma alternativa (pero menos eficiente) de recorrer cada elemento de una matriz 

con cualquier número de dimensiones hace uso de un solo bucle for:

#+BEGIN_SRC python
for index_tuple, value in np.ndenumerate(table2):
     print("index %s has value %g" % (index_tuple, value))

index (0,0) has value -30
index (0,1) has value -22
index (1,0) has value -20
index (1,1) has value -4
index (2,0) has value -10
index (2,1) has value 14
#+END_SRC 


En la misma forma que podemos extraer sublistas de listas, podemos extraer subarreglos de matrices usando rebanadas:

#+BEGIN_SRC python
table2[0:table2.shape[0], 1]  # 2nd column (index 1)
# array([-22.,  -4.,  14.])

table2[0:, 1]             # same
# array([-22.,  -4.,  14.])

table2[:, 1]              # same
# array([-22.,  -4.,  14.])
#+END_SRC


Supongamos queremos extraer un subarreglo de t que consiste de los renglones con índices 0 y 3 y las columnas con índices 1 y 2:

#+BEGIN_SRC python
t = np.linspace(1, 30, 30).reshape(5, 6)
print(t)
# array([[  1.,   2.,   3.,   4.,   5.,   6.],
# [  7.,   8.,   9.,  10.,  11.,  12.],
# [ 13.,  14.,  15.,  16.,  17.,  18.],
# [ 19.,  20.,  21.,  22.,  23.,  24.],
# [ 25.,  26.,  27.,  28.,  29.,  30.]])

t[np.ix_([0,3], [1,2])]
# array([[  2.,   3.],
#  [ 20.,  21.]])

t[np.ix_([0,3], [1,2])] = 0
print(t)
# array([[  1.,   0.,   0.,   4.,
#                           5.,   6.],
# [  7.,   8.,   9.,  10.,  11.,  12.],
# [ 13.,  14.,  15.,  16.,  17.,  18.],
# [ 19.,   0.,   0.,  22.,  23.,  24.],
# [ 25.,  26.,  27.,  28.,  29.,  30.]])
#+END_SRC


* Matrices

Numpy tiene arreglos llamados matrix o mat para arreglos de una o dos dimensiones:

#+BEGIN_SRC python
import numpy as np

x1 = np.array([1, 2, 3], float)
x2 = np.matrix(x1)
print(x2)
# matrix([[[1.,  2.,  3.]]])

x3 = mat(x).transpose()
print(x3)
# matrix([[ 1.],
# [ 2.], 
# [ 3.]])

isinstance(x3, np.matrix)
# True
#+END_SRC

Una característica especial de los objetos de matriz es que el operador de multiplicación 
puede ser matriz-matriz, vector-matriz, matriz-vector como en álgebra lineal.

#+BEGIN_SRC python
A = eye(3) # identity matrix
print(A)
# array([[ 1.,  0.,  0.],
# [ 0., 1., 0.]
# [ 0.,  0.,  1.]])

A = mat(A)
print(A)
# matrix([[ 1.,  0.,  0.],
# [ 0., 1., 0.],
# [ 0.,  0.,  1.]])


y2 = x2*A  # vector-matrix product
print(y2)
# matrix([[[ 1.,  2.,  3.]] ])

y3 = A*x3   # matrix-vector product
print(y3)
# matrix([[ 1.],
# [ 2.], 
# [ 3.]])
#+END_SRC

